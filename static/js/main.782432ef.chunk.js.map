{"version":3,"sources":["components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","flipped","onChoiceCard","disabled","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiseOne","setChoiseOne","choiseTwo","setChoiseTwo","setDisabled","shffleCards","shuffledCards","sort","Math","random","map","id","cardChoiseHandler","resetTurn","prevValue","useEffect","preveVal","console","log","setTimeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAwBeA,EAtBI,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAOjD,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAWH,EAAU,UAAY,GAAtC,UACE,qBAAKG,UAAU,QAAQC,IAAKL,EAAKK,IAAKC,IAAI,eAC1C,qBACEF,UAAU,OACVC,IAAK,iBACLC,IAAI,YACJC,QAdiB,WAClBJ,GACHD,EAAaF,YCDbQ,G,MAAa,CACjB,CAAEH,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,kBAAmBI,SAAS,GACnC,CAAEJ,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,mBAAoBI,SAAS,KAmFvBC,MA9Ef,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOR,EAAP,KAAiBiB,EAAjB,KAGMC,EAAc,WAClB,IAAMC,EAAgB,UAAId,EAAeA,GACtCe,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAAC1B,GAAD,mBAAC,eAAeA,GAAhB,IAAsB2B,GAAIH,KAAKC,cAEtCR,EAAa,MACbE,EAAa,MACbN,EAASS,GACTP,EAAS,IAGLa,EAAoB,SAAC5B,GACzBgB,EAAYG,EAAanB,GAAQiB,EAAajB,IAG1C6B,EAAY,WAChBZ,EAAa,MACbE,EAAa,MACbC,GAAY,GACZL,GAAS,SAACe,GAAD,OAAeA,EAAY,MA8BtC,OA3BAC,qBAAU,WACJf,GAAaE,IACfE,GAAY,GACRJ,EAAUX,MAAQa,EAAUb,KAC9BQ,GAAS,SAACmB,GACR,OAAOA,EAASN,KAAI,SAAC1B,GACnB,OAAIA,EAAKK,MAAQW,EAAUX,IAClB,2BAAKL,GAAZ,IAAkBS,SAAS,IAEpBT,QAIb6B,MAEAI,QAAQC,IAAI,aACZC,YAAW,WACTN,MACC,SAGN,CAACb,EAAWE,IAEfa,qBAAU,WACRV,MACC,IAGD,sBAAKjB,UAAU,MAAf,UACE,6CACA,wBAAQG,QAASc,EAAjB,sBAEA,qBAAKjB,UAAU,YAAf,SACGQ,EAAMc,KAAI,SAAC1B,GAAD,OACT,cAAC,EAAD,CAEEC,QAASD,IAASgB,GAAahB,IAASkB,GAAalB,EAAKS,QAC1DT,KAAMA,EACNE,aAAc0B,EACdzB,SAAUA,GAJLH,EAAK2B,SAQhB,wCAAWb,SCnFjBsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.782432ef.chunk.js","sourcesContent":["import \"./SingleCard.css\";\r\n\r\nconst SingleCard = ({ card, flipped, onChoiceCard, disabled }) => {\r\n  const cardClickHandler = () => {\r\n    if (!disabled) {\r\n      onChoiceCard(card);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className={flipped ? \"flipped\" : \"\"}>\r\n        <img className=\"front\" src={card.src} alt=\"card front\" />\r\n        <img\r\n          className=\"back\"\r\n          src={\"/img/cover.png\"}\r\n          alt=\"card back\"\r\n          onClick={cardClickHandler}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleCard;\r\n","import { useEffect, useState } from \"react\";\nimport SingleCard from \"./components/SingleCard\";\nimport \"./App.css\";\n\nconst cardImages = [\n  { src: \"/img/helmet-1.png\", matched: false },\n  { src: \"/img/potion-1.png\", matched: false },\n  { src: \"/img/ring-1.png\", matched: false },\n  { src: \"/img/scroll-1.png\", matched: false },\n  { src: \"/img/shield-1.png\", matched: false },\n  { src: \"/img/sword-1.png\", matched: false },\n];\n\nlet initialLoad = true;\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiseOne, setChoiseOne] = useState(null);\n  const [choiseTwo, setChoiseTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  // shuffle cards\n  const shffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }));\n\n    setChoiseOne(null);\n    setChoiseTwo(null);\n    setCards(shuffledCards);\n    setTurns(0); // for reseting the game\n  };\n\n  const cardChoiseHandler = (card) => {\n    choiseOne ? setChoiseTwo(card) : setChoiseOne(card);\n  };\n\n  const resetTurn = () => {\n    setChoiseOne(null);\n    setChoiseTwo(null);\n    setDisabled(false);\n    setTurns((prevValue) => prevValue + 1);\n  };\n\n  useEffect(() => {\n    if (choiseOne && choiseTwo) {\n      setDisabled(true);\n      if (choiseOne.src === choiseTwo.src) {\n        setCards((preveVal) => {\n          return preveVal.map((card) => {\n            if (card.src === choiseOne.src) {\n              return { ...card, matched: true };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        console.log(\"not equal\");\n        setTimeout(() => {\n          resetTurn();\n        }, 500);\n      }\n    }\n  }, [choiseOne, choiseTwo]);\n\n  useEffect(() => {\n    shffleCards();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n      <button onClick={shffleCards}>New Game</button>\n\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <SingleCard\n            key={card.id}\n            flipped={card === choiseOne || card === choiseTwo || card.matched}\n            card={card}\n            onChoiceCard={cardChoiseHandler}\n            disabled={disabled}\n          />\n        ))}\n      </div>\n      <p>Turns: {turns}</p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}